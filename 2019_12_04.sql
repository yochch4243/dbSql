--2018년 국세청 발표 시도군별 연말정산자료
--1.tax테이블을 이용/ 시도/시도군별 인당 연말정산 신고액 구하기
--2.신고액이 많은 순서로 랭킹 부여하기
--랭킹    시도  시군구 인당연말정산신고액
-- 1    서울특별시   서초구 7000
-- 2    서울특별시   강남구 6800
SELECT *
FROM
(SELECT ROWNUM rn, sido, sigungu, cal_sal
FROM
(SELECT sido, sigungu, sal, people, ROUND(sal/people, 1) cal_sal
FROM tax
ORDER BY cal_sal DESC)) b,

(SELECT ROWNUM rn, sido, sigungu, 도시발전지수
FROM
(SELECT a.sido, a.sigungu, ROUND(a.cnt/b.cnt, 1) as 도시발전지수 
FROM
(SELECT sido, sigungu, COUNT(*) cnt  --버거킹, KFC, 맥도날드 건수
FROM fastfood
WHERE gb IN ('KFC', '맥도날드', '버거킹')
GROUP BY sido, sigungu) a,

(SELECT sido, sigungu, COUNT(*) cnt  --롯데리아 건수
FROM fastfood
WHERE gb IN ('롯데리아')
GROUP BY sido, sigungu) b
WHERE a.sido = b.sido
AND a.sigungu = b.sigungu
ORDER BY 도시발전지수 DESC)) a
WHERE a.rn(+) = b.rn
ORDER BY b.rn;

-- 도시발전지수 시도, 시군구와 연말정산 납입금액의 시도, 시군구가 같은 지역끼리 조인
-- 정렬순서는 tax테이블의 id컬럼순으로

SELECT b.id, b.sido, b.sigungu, b.cal_sal, 도시발전지수
FROM

(SELECT id, sido, sigungu, sal, people, ROUND(sal/people, 1) cal_sal
FROM tax
ORDER BY cal_sal DESC) b,


(SELECT a.sido, a.sigungu, ROUND(a.cnt/b.cnt, 1) as 도시발전지수 
FROM
(SELECT sido, sigungu, COUNT(*) cnt  --버거킹, KFC, 맥도날드 건수
FROM fastfood
WHERE gb IN ('KFC', '맥도날드', '버거킹')
GROUP BY sido, sigungu) a,

(SELECT sido, sigungu, COUNT(*) cnt  --롯데리아 건수
FROM fastfood
WHERE gb IN ('롯데리아')
GROUP BY sido, sigungu) b
WHERE a.sido = b.sido
AND a.sigungu = b.sigungu
ORDER BY 도시발전지수 DESC) a
WHERE a.sido(+) = b.sido
AND a.sigungu(+) = b.sigungu
ORDER BY b.id;

SELECT *
FROM tax;

UPDATE tax set people = 70391
WHERE sido = '대전광역시'
AND sigungu = '동구';
COMMIT;

SELECT *
FROM fastfood;


SELECT ROWNUM rn, sido, sigungu, 도시발전지수, cal_sal
FROM       
(SELECT a.sido, a.sigungu, ROUND(a.cnt/b.cnt, 1) as 도시발전지수 , c.cal_sal
FROM 
(SELECT sido, sigungu, COUNT(*) cnt  --버거킹, KFC, 맥도날드 건수
FROM fastfood
WHERE gb IN ('KFC', '맥도날드', '버거킹')
GROUP BY sido, sigungu) a,

(SELECT sido, sigungu, COUNT(*) cnt  --롯데리아 건수
FROM fastfood
WHERE gb IN ('롯데리아')
GROUP BY sido, sigungu) b,


(SELECT sido, sigungu, sal, people, ROUND(sal/people, 1) cal_sal
FROM tax) c
WHERE a.sido = b.sido
AND a.sigungu = b. sigungu
AND b.sido = c.sido
AND b.sigungu = c.sigungu

ORDER BY cal_sal, 도시발전지수 DESC);


UPDATE TAX SET SIGUNGU = TRIM(SIGUNGU);
COMMIT;

-- SMITH가 속한 부서 찾기

SELECT *
FROM emp
WHERE ename = 'SMITH';

SELECT *
FROM emp
WHERE deptno = (SELECT deptno
                FROM emp
                WHERE ename IN 'SMITH'); 

SELECT empno, ename, deptno,
      (SELECT dname FROM dept WHERE dept.deptno = emp.deptno) dname 
FROM emp;

--SCALAR SUBQUERY
--SELECT 절에 표현된 서브 쿼리
--한 행, 한 COLUMN을 조회해야 한다
SELECT empno, ename, deptno,
      (SELECT dname FROM dept) dname 
FROM emp;

--INLINE VIEW
--FROM 절에 사용되는 서브 쿼리

--SUBQUERY
--WHERE절에 사용되는 서브쿼리

--sub 1 :평균 급여보다 높은 급여를 받는경우
SELECT COUNT(*) cnt
FROM emp
WHERE sal > (SELECT AVG(sal)
             FROM emp);
             
--sub 2 : 평균 급여보다 높은 급여를 받는 직원의 정보를 조회하기
SELECT *
FROM emp
WHERE sal > (SELECT AVG(sal)
             FROM emp);

--sub3 1. SMITH와 WARD가 속한 부서 조회
SELECT deptno
FROM emp
WHERE ename IN ('SMITH', 'WARD');

--sub3 2. 1번에 나온 결과값을 이용하여 해당 부서번호에 속하는 직원 조회
SELECT *
FROM emp
WHERE deptno IN (SELECT deptno
                FROM emp
                WHERE ename IN ('SMITH', 'WARD'));
-- SMITH나 WARD보다 급여가 적은 직원조회        
SELECT *
FROM emp
WHERE sal <= ANY (SELECT sal     -- 800, 1250 --> 1250보다 작은 사람
                 FROM emp 
                 WHERE ename IN ('SMITH', 'WARD'));

SELECT *
FROM emp
WHERE sal <= ALL (SELECT sal     -- 800, 1250 --> 800보다 작은 사람
                 FROM emp 
                 WHERE ename IN ('SMITH', 'WARD'));
--관리자 역할을 하지않는 사원정보 조회
SELECT*
FROM emp; --사원정보조회

SELECT empno, mgr
FROM emp;

--관리자 역할을 하는 사원조회
SELECT *
FROM emp
WHERE empno IN (SELECT mgr
                FROM emp);

--관리자가 아닌 사원
--NOT IN 연산자 사용시 NULL이 데이터에 존재하지 않아야 정상동작된다.

SELECT *
FROM emp
WHERE empno NOT IN (SELECT NVL(mgr, -1) --NULL값을 존재하지 않을만한 데이터로 치환
                    FROM emp);
SELECT *
FROM emp
WHERE empno NOT IN (SELECT mgr  --IS NOT NULL을 사용해 NULL이 들어간 값을 없앤다
                    FROM emp
                    WHERE mgr IS NOT NULL);
                    
--pair wise
--ALLEN, CLARK의 매니저와 부서번호가 동시에 같은 사원 정보 조회
-- (7698, 30)
-- (7839, 10)
SELECT *
FROM emp
WHERE (mgr, deptno) IN(SELECT mgr, deptno
                       FROM emp
                       WHERE empno IN (7499, 7782));

--매니저가 7698이거나 7839이면서
--소속부서가 10번이거나 30번인 직원정보 조회
-- 7698, 10
-- 7698, 30
-- 7839, 10
-- 7839, 30
SELECT *
FROM emp
WHERE mgr IN(SELECT mgr
             FROM emp
             WHERE empno IN (7499, 7782))
                       
AND deptno IN  (SELECT deptno
                FROM emp
                WHERE empno IN (7499, 7782));
                                        
--비상호 연관 서브 쿼리
--메인쿼리의 컬럼을 서브쿼리에서 사용하지 않는 형태의 서브 쿼리

--비상호 연관 서브쿼리의 경우 메인쿼리에서 사용하는 테이블, 서브쿼리 조회 순서를
--성능적으로 유리한쪽으로 판단하여 순서를 결정한다.
--메인쿼리의 emp테이블을 먼저 읽을수도 있고, 서브쿼리의 emp테이블을 먼저 읽을수도 있다.

--비상호 연관 서브쿼리에서 서브쿼리쪽 테이블을 먼저 읽을때는 서브쿼리가 제공자 역할을 했다라고 표현(도서참고)
--비상호 연관 서브쿼리에서 서브쿼리쪽 테이블을 나중에 읽을 때는 서브쿼리가 확인자 역할을 했다라고 표현

--직원의 급여 평균보다 높은 급여를 받는 직원정보조회
--직원의 급여 평균
SELECT *
FROM emp
WHERE sal > (SELECT AVG(sal)
            FROM emp);

--상호연관 서브쿼리
--해당직원이 속한 부서의 급여평균보다 높은 급여를 받는 직원 조회
SELECT *
FROM emp m
WHERE sal > (SELECT AVG(sal)
            FROM emp
            WHERE m.deptno = deptno);


--10번 부서의 급여평균
SELECT AVG(sal)
FROM emp
WHERE deptno = 10;


--20번 부서의 급여평균
SELECT AVG(sal)
FROM emp
WHERE deptno = 20;


--30번 부서의 급여평균
SELECT AVG(sal)
FROM emp
WHERE deptno = 30;





